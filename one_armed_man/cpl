#!/usr/bin/env ruby

class Numeric
    def seconds
        self
    end
    def second
        self
    end
end

Known_resources = []
class Resource_type
    attr_reader :states
    def initialize(&block)
        @states = {}
        instance_eval &block
    end
    def state(tag,*values)
        values = [false,true] if values.empty?
        @states[tag] = values
    end
    def new(name,args={})
        A_resource.new(self,name,args)
    end
end

class A_resource
    attr_reader :type,:should,:name,:transitions,:cost
    def initialize(type,name,args={})
        @type = type
        @name = name
        Known_resources << self
        @state = {}
        @transitions = {}
        (args.delete(:transitions)||{}).each { |pvv,x|
            p,*vv = *pvv
            v1s,v2s = *vv.collect { |v|
                case v
                  when '*';   type.states[p]
                  when Array; v
                  else        [v]
                  end
            }
            v1s.each { |v1| v2s.each { |v2|
                k = [p,v1,v2]
                @transitions[k] ||= {}
                @transitions[k][:requires] ||= []
                @transitions[k][:requires] |= (x[:requires] || []).
                    collect { |pvv| 
                        pvv.collect { |v| 
                            case v
                            when :old; v1
                            when :new; v2
                            when :old_object; v1.to_s.capitalize
                            when :new_object; v2.to_s.capitalize
                            else v
                            end
                        }
                    }
            }}
        }
        #puts "#{name} transitions:"
        #@transitions.each { |k,v|
        #    p [k.join(':'),v.collect { |x| x.join(':') }]
        #}
        @cost = args.delete(:cost)
        @should = args
        @type.states.each { |prop,vals| @state[prop] = vals.first }
    end
    def [](*args)
        prop = args.shift
        if args.empty?
            # The value in our current state
            @state[prop]                 
        else
            # The value in a specified state
            args.last[$sd.index([self,prop])] 
        end
    end
    def to_s
        name
    end
    def state_cost(world)
        @cost ? @cost.call(self,world) : 0.0
    end
end

def cost(a,b,delta_t)
    (state_cost(a) + state_cost(b))*delta_t/2
end


def state_cost(a)
    rand/10000.0+Known_resources.inject(0) { |t,r| t+r.state_cost(a) }
end

# Returns an array of the neighbors of s (all the states that can be reached 
# in one step without violating any constraints).  Each neighhbor in this 
# array is represented by an array of four elements: the resulting state, the 
# transition to get there, and the time it takes to do so (defaulting to 1 
# second if no time was specified).
#
# Transitions are represented as a three element array: the resource, the 
#     property being changed, and its new value
#
# States are represented as arrays of values for all the properties of interest
#     Ordered according to the state_dimensions list in $sd
# 
def neighbors(s)
    result = []
    $sd.each_with_index { |rp,i|
        r,p = *rp
        vs = $ssoi[rp]
        #puts "#{r}.#{p} can be #{vs.inspect}, in s it is #{s[i]}"
        (vs-[s[i]]).each { |v|
            trans = r.transitions[[p,s[i],v]] || {}
            reqs = trans[:requires] || []
            if reqs.all? { |rd,pd,vd,nix| vx = s[$sd.index([rd,pd]) || fail("#{rd}.#{pd} not in $sd")]; nix ? (vx != vd) : (vx == vd) } 
                s2 = s.dup
                s2[i] = v
                result << [s2,[r,p,v],trans[:takes] || 1.second]
            end
        }
    }
    result
end

def printable_state(s)
    tagged_values = $sd.zip(s).collect { |rp,v| ("%s.%s:%s" % [rp[0],rp[1],v]).gsub(/the /,'') } 
    format = ("\t%30s"*s.length).gsub(/((\t%30s){3})/,"\\1\n") 
    format % tagged_values
end

def make_it_so
    #
    #
    #
    puts "Identifying sub-states of interest"
    srand
    substates_of_interest = Hash.new { |h,k| h[k] = [] }
    Known_resources.each { |r|
         r.transitions.each { |rpvv,t|
             (t[:requires] || []).each { |rpv|
                 rpv[0] = eval(rpv[0]) rescue rpv[0].to_sym if rpv[0].is_a? String
             }
         }
         r.should.each { |p,v|
             substates_of_interest[[r,p]] |= [r[p],v] unless r[p] == v
             #puts "#{r}.#{p} is #{r[p]} instead of #{v}" unless r[p] == v
         }
    }
    # puts "unaugmented:",sub-states_of_interest.collect { |rp,vs| "#{rp.join('.')} in #{vs.inspect}" }.join('; ')
    substates_of_interest.each { |rp,vs| r,p = *rp; vs << r.type.states[p]; vs.flatten!; vs.uniq! }
    # puts "augmented:",sub-states_of_interest.collect { |rp,vs| "#{rp.join('.')} in #{vs.inspect}" }.join('; ')
    done = false
    while !done
        done = true
        substates_of_interest.collect { |rp,vs|
            r,p = *rp
            vs.each { |v1| vs.each { |v2| if v1 != v2
                #puts "May need to take #{p} of #{r} from #{v1} to #{v2}"
                ((r.transitions[[p,v1,v2]]||{})[:requires] || []).each { |rd,pd,vd,nix|
                    substates_of_interest[[rd,pd]] |= [rd[pd]]
                    to_add = (nix ? (rd.type.states[pd] - [vd]) : [vd]) - substates_of_interest[[rd,pd]]
                    unless to_add.empty?
                        done = false
                        #puts "Adding #{rd}.#{pd} : #{to_add.join(', ')}"
                        substates_of_interest[[rd,pd]] |= to_add
                    end
                }
            end } }
        }
    end
    #
    #
    #
    $ssoi = substates_of_interest
    $sd = state_dimensions = substates_of_interest.keys
    #p state_dimensions.collect { |r,p| "#{r}.#{p}" }
    #puts "#{substates_of_interest.inject(1) { |n,rpvs| n*rpvs.last.length }} possible states of interest"
    current_state = state_dimensions.collect {|r,p| r[p] }
    goal = state_dimensions.collect { |r,p| r.should[p] }
    #p current_state
    #p goal
    #
    #
    #
    puts "Computing reachable states"
    reachable_states = {current_state => [0,nil,nil]}
    front = neighbors(current_state).collect { |n,op,delta_t| [n,cost(current_state,n,delta_t),current_state,op] }
    op = x = nil
    while (x,c,b,op = front.shift) and x do
        #front.reject! { |f| f[0] == x }

        # TODO: Instead of just skipping if we've already found a way to the state we need to
        #       update it if it's in the front and the path we just found is cheaper than the
        #       one we found first; this complication comes from the way we're computing time
        #       based costs.
        #
        #       Another possible solution: always add them to the front if they're already there
        #       and then remove all of them when the first one is popped.
        #
        next if reachable_states.include? x

        #puts op.join(':')
        reachable_states[x] = [c,b,op]
        break if (0...(state_dimensions.length)).all? { |i| !goal[i] or x[i] == goal[i] }
        front += neighbors(x).
          reject  { |n,op,delta_t| reachable_states.include? n }.
          collect { |n,op,delta_t| [n,c+cost(x,n,delta_t),x,op] }
        front = front.sort_by { |x| x[1] }
    end
    puts "#{reachable_states.length} reachable states:"
    #
    #
    #
    puts "Finding path"
    ans = []
    while x
        ans << op << [c,x]
        c,x,op = *reachable_states[x]
    end
    ans.shift
    puts "Answer (#{ans.length} steps, total cost: #{(ans.first||{})[0]}):"
    #p ans.reverse
    ans.reverse.each { |s|
        if s.length == 3
            puts "%s.%s <-- %s" % s
        elsif false
            puts s[0]
        elsif false
            puts (("    (%s) " % s[0])+printable_state(s[1]))
        end
    }
    if ans.first and true
        puts "Results in:"
        final_state = printable_state(ans.first[1])
        puts final_state
        %w{
            hand.holding:nothing            cupboard.door:closed            milk.location:in_fridge
            cereal.location:in_cupboard     bowl.contains_cereal:true       bowl.contains_milk:true
            bowl.location:on_counter        spoon.location:on_counter       fridge.door:closed
        }.each { |s| puts "Should have #{s}\n" unless final_state.include? s }
    end
end

def something_with(&block)
    Resource_type.new(&block)
end

problem = File.read(ARGV.first+'.cpl').
  gsub(/^ *state +([a-z_]+) +can +be +(([a-z_]+, *)*[a-z_]+ +or +[a-z_]+) *$/) { 
      " state :#{$1}, :#{$2.gsub(/(, *| +or +)/,',:')}"
  }.
  gsub(/^ *state +([a-z_]+) *$/,' state :\1').
  gsub(/that +([A-Z][a-z_]*) +([a-z_]+) +not +be +([a-z_0-9]+)/,'["\1",:\2,:\3,:not]').# that Foo door not be closed
  gsub(/that +([A-Z][a-z_]*) +not +be +([a-z_0-9]+)/, '["\1",:location,:\2,:not]').    # that Foo not be here
  gsub(/that +([A-Z][a-z_]*) +([a-z_]+) +be +([a-z_0-9]+)/,'["\1",:\2,:\3]').          # that Foo door be open
  gsub(/that +([A-Z][a-z_]*) +be +([a-z_]+) +([a-z_0-9]+)/,'["\1",:\2,:\3]').          # that Foo be eating fruit
  gsub(/that +([A-Z][a-z_]*) +be +([a-z_0-9]+) *([,\])]|$)/,'["\1",:location,:\2]\3'). # that Foo be on_mars
  gsub(/that +([a-z_]*) +([a-z_]+) +not +be +([a-z_0-9]+)/,'[:\1,:\2,:\3,:not]').     # that foo door not be closed
  gsub(/that +([a-z_]*) +not +be +([a-z_0-9]+)/,           '[:\1,:location,:\2,:not]').  # that foo not be here
  gsub(/that +([a-z_]*) +([a-z_]+) +be +([a-z_0-9]+)/,     '[:\1,:\2,:\3]').          # that foo door be open
  gsub(/that +([a-z_]*) +be +([a-z_]+) +([a-z_0-9]+)/,     '[:\1,:\2,:\3]').          # that foo be eating fruit
  gsub(/that +([a-z_]*) +be +([a-z_0-9]+) *([,\])]|$)/,    '[:\1,:location,:\2]\3').  # that foo be on_mars
  gsub(/takes +(\d+\.?\d*) +seconds?/,':takes => \1.second').
  gsub(/requires +/,':requires => ').
  gsub(/^ *cost *$/,                                             ' :cost => lambda {|obj,world| case ').
  gsub(/^ +when +([a-z_]+) +is +([a-z_]+) +then +(\d+\.?\d*) *$/,'   when  obj[:\1,world] == :\2; \3'  ).
  gsub(/^ +when +([a-z_]+) +then +(\d+\.?\d*) *$/,               '   when  obj[:\1,world]; \2'        ).
  gsub(/^ +when +not +([a-z_]+) +then +(\d+\.?\d*) *$/,          '   when !obj[:\1,world]; \2'        ).
  gsub(/^ +otherwise +(\d+\.?\d*) *$/,                           '   else \1; end},'                  ).
  gsub(/^ +([a-z_]+) +should +be +([a-z_]+) *$/,                 ' :\1 => :\2,').
  gsub(/^ +should +be +([a-z_]+) *$/,                            ' :location => :\1,').
  gsub(/^ +should +([a-z_]+) *$/)                              { " :#{$1.gsub(/^([a-z]+[^s])_/,'\1s_')} => true," }.
  gsub(/^ +moving +from +([a-z_]+) +to +([a-z_]+)/,              ' [:location,:\1,:\2] => ').
  gsub(/^ +moving +from +([a-z_]+)/,                             ' [:location,:\1,"*"] => ').
  gsub(/^ +moving +to +([a-z_]+)/,                               ' [:location,"*",:\1] => ').
  gsub(/^ +going +from +([a-z_]+) +([a-z_]+) +to +\1 +([a-z_]+)/,' [:\1,:\2,:\3] => ').
  gsub(/^ +going +from +([a-z_]+) +([a-z_]+) +\{/,               ' [:\1,:\2,"*"] => {').
  gsub(/^ +going +to +([a-z_]+) +([a-z_]+) +\{/,                 ' [:\1,"*",:\2] => {').
  gsub(/^ +going +to +([a-z_]+) +\{/,                            ' [:\1,false,true] => {').
  gsub(/^ +transitions +\{/,                                     ' :transitions => {')

#print problem
eval problem

make_it_so


A_hand = something_with {
    state holding can be nothing, milk, bowl, spoon or cereal
}

A_fridge = something_with {
    # We write it this way instead of the more natural "open or closed" because
    # the first specified state value is used as the starting state.
    state door can be closed or open
}

A_cupboard = something_with {
    state door can be closed or open
}

A_milk_bottle = something_with {
    state location can be in_fridge,mid_air or on_counter
}

A_cereal_box = something_with {
    state location can be in_cupboard, mid_air or on_counter
}

A_spoon = something_with {
    state location can be in_cupboard or on_counter
}

A_bowl = something_with {
    state location can be in_cupboard or on_counter
    # states with no specified values default to boolean (false or true)
    state contains_cereal
    state contains_milk
}


Hand = A_hand.new('your hand',
    :transitions => ({
        [:holding,:spoon, :nothing] => {requires [that Spoon be on_counter]},
        [:holding,:bowl,  :nothing] => {requires [that Bowl be on_counter]},
        [:holding,:milk,  :nothing] => {requires [that Milk be on_counter]},
        [:holding,:cereal,:nothing] => {requires [that Cereal be on_counter]}
    }.merge(
        (os = [:spoon,:bowl,:milk,:cereal]).inject({}) { |h,o|
            (os-[o]).inject(h) { |h,o2| h[[:holding,o,o2]] = {requires [["Hand",:holding,o2]]}; h }
        }
    ))
)
Fridge   = A_fridge.new('the fridge', 
    :door => :closed,
    cost
        when door is open then 5
        otherwise 0.0
    :transitions => {
        [:door,:open,:closed] => {
            takes 1 second
        },
        [:door,:closed,:open] => {
            takes 1 second,
            requires [that Hand be holding nothing]
        }
    }
)
Cupboard = A_cupboard.new('the cupboard', 
    :door => :closed,
    :transitions => {
        [:door,:open,:closed] => {
            takes 1 second
        },
        [:door,:closed,:open] => {
            takes 1 second,
            requires [that Hand be holding nothing]
        }
    }
)
Milk = A_milk_bottle.new('the milk',
    :location => :in_fridge,
    cost 
       when location is fridge then 0.0
       otherwise 2.0
    :transitions => {
        [:location,'*',:mid_air]   => {requires [that Hand be holding milk]},
        [:location,'*',:in_fridge] => {requires [that Fridge door be open, that Hand be holding nothing]},
        [:location,:in_fridge,'*'] => {requires [that Fridge door be open]}
    }
)
Cereal = A_cereal_box.new('the cereal',
    :location => :in_cupboard,
    :transitions => {
        [:location,'*',:mid_air]     => {requires [that Hand be holding cereal]},
        [:location,'*',:in_cupboard] => {requires [that Cupboard door be open,that Hand be holding nothing]},
        [:location,:in_cupboard,'*'] => {requires [that Cupboard door be open]}
    }
)
Spoon = A_spoon.new('the spoon',
    :location => :on_counter,
    :transitions => {
        [:location,:on_counter,:in_cupboard] => {
            takes 1 second,
            requires [that Cupboard door be open, that Hand be holding nothing]
        },
        [:location,:in_cupboard,:on_counter] => {
            takes 1 second,
            requires [that Cupboard door be open,that Hand be holding nothing]
        }
    }
)

Bowl = A_bowl.new('the bowl',
    :location => :on_counter,
    :contains_cereal => true,
    :contains_milk => true,
    cost
        # we have a mild disinclination to add the milk
        # before the cereal, because it's more likely to
        # splash.
        when contains_cereal then 0.0
        when not contains_milk then 0.0
        otherwise 0.5
    :transitions => {
        [:location,:on_counter,:in_cupboard] => {
            takes 1 second,
            requires [that Cupboard door be open,that Hand be holding nothing]
        },
        [:location,:in_cupboard,:on_counter] => {
            takes 1 second,
            requires [that Cupboard door be open,that Hand be holding nothing]
        },
        [:contains_milk,  false,true] => {
            requires [that Bowl be on_counter, that Milk be mid_air]
        },
        [:contains_cereal,false,true] => {
            requires [that Bowl be on_counter,that Cereal be mid_air]
        }
    }
)



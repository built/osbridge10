A_hand = something_with {
    state holding can be nothing, milk, bowl, spoon or cereal
}

A_fridge = something_with {
    # We write it this way instead of the more natural "open or closed" because
    # the first specified state value is used as the starting state.
    state door can be closed or open
}

A_cupboard = something_with {
    state door can be closed or open
}

A_milk_bottle = something_with {
    state location can be in_fridge,mid_air or on_counter
}

A_cereal_box = something_with {
    state location can be in_cupboard, mid_air or on_counter
}

A_spoon = something_with {
    state location can be in_cupboard or on_counter
}

A_bowl = something_with {
    state location can be in_cupboard or on_counter
    # states with no specified values default to boolean (false or true)
    state contains_cereal
    state contains_milk
}

Hand = A_hand.new('your hand',
    transitions {
        going to holding nothing {requires [that old_object not be mid_air]},
        going to holding milk    {requires [that Hand be holding nothing]},
        going to holding bowl    {requires [that Hand be holding nothing]},
        going to holding spoon   {requires [that Hand be holding nothing]},
        going to holding cereal  {requires [that Hand be holding nothing]},
    }
)

Fridge   = A_fridge.new('the fridge', 
    door should be closed
    cost
        when door is open then 5
        otherwise 0.0
    transitions {
        going from door open to door closed {
            takes 1 second
        },
        going from door closed to door open {
            takes 1 second,
            requires [that Hand be holding nothing]
        }
    }
)

Cupboard = A_cupboard.new('the cupboard', 
    door should be closed
    transitions {
        going from door open to door closed {
            takes 1 second
        },
        going from door closed to door open {
            takes 1 second,
            requires [that Hand be holding nothing]
        }
    }
)
Milk = A_milk_bottle.new('the milk',
    should be in_fridge
    cost 
       when location is fridge then 0.0
       otherwise 2.0
    transitions {
        moving to mid_air     {requires [that Hand be holding milk]},
        moving to in_fridge   {requires [that Fridge door be open, that Hand be holding nothing]},
        moving from in_fridge {requires [that Fridge door be open]}
    }
)

Cereal = A_cereal_box.new('the cereal',
    should be in_cupboard
    transitions {
        moving to mid_air       {requires [that Hand be holding cereal]},
        moving to in_cupboard   {requires [that Cupboard door be open,that Hand be holding nothing]},
        moving from in_cupboard {requires [that Cupboard door be open]}
    }
)

Spoon = A_spoon.new('the spoon',
    should be on_counter
    transitions {
        moving from on_counter to in_cupboard {
            takes 1 second,
            requires [that Cupboard door be open, that Hand be holding nothing]
        },
        moving from in_cupboard to on_counter {
            takes 1 second,
            requires [that Cupboard door be open,that Hand be holding nothing]
        }
    }
)

Bowl = A_bowl.new('the bowl',
    should be on_counter
    should contain_cereal
    should contains_milk
    cost
        # we have a mild disinclination to add the milk
        # before the cereal, because it's more likely to
        # splash.
        when contains_cereal then 0.0
        when not contains_milk then 0.0
        otherwise 0.5
    transitions {
        moving from on_counter to in_cupboard {
            takes 1 second,
            requires [that Cupboard door be open,that Hand be holding nothing]
        },
        moving from in_cupboard to on_counter {
            takes 1 second,
            requires [that Cupboard door be open,that Hand be holding nothing]
        },
        going to contains_milk {
            requires [that Bowl be on_counter, that Milk be mid_air]
        },
        going to contains_cereal {
            requires [that Bowl be on_counter,that Cereal be mid_air]
        }
    }
)


